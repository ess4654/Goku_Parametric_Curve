import ddf.minim.*;

Minim minim;
AudioPlayer player;

float DefaultScale = 0.26;
float FR = 27;
float SampleRate = 8;

boolean running = true;
boolean DEBUGGING = false;
boolean SoundOn = true;

float t = 0;
float scale = DefaultScale;
color transparent = color(0, 0, 0, 0);
color skin = color(252, 216, 187);
color darkskin = color(187, 99, 75);
color orange = color(252, 88, 30);
color blue = color(18, 35, 130);
color black = color(40, 40, 40);
color white = color(255, 255, 255);
ArrayList<PVector> points = new ArrayList<PVector>();
ArrayList<Integer> lineColor = new ArrayList<Integer>();
ArrayList<Integer> strokes = new ArrayList<Integer>();

void setup()
{
  fullScreen(P2D);
  //size(800, 800, P2D);
  background(0);
  noFill();
  smooth();
  frameRate(FR);
  
  minim = new Minim(this);
  player = minim.loadFile("Goku Theme.mp3");
  if(SoundOn)
    player.loop();
}

void keyPressed() {
  if(key == ' ')
    running = !running;
  if(key == 'r')
    reset();
}

void reset()
{
  frameCount = -1;
  t = 0;
  lineColor.clear();
  strokes.clear();
  points.clear();
  minim.stop();
  minim = new Minim(this);
  if(SoundOn)
    player.loop();
  scale = DefaultScale;
}

float updateT(float T)
{
  T += 0.005;
  
  if(T >= 254.510) { //END
    strokes.add(1);
    lineColor.add(color(0, 0, 0));
    return 84 * PI;
  }
  if(T >= 251.337 && T < 254.510) { //BELT LINES
    strokes.add(1);
    lineColor.add(blue);
    return T - 0.002;
  }
  if(T >= 242.194 && T < 251.337) { //SKIP
    strokes.add(1);
    lineColor.add(transparent);
    return 251.337;
  }
  if(T >= 238.805 && T < 242.194) { //MOUTH
    strokes.add(2);
    lineColor.add(darkskin);
    return T + 0.01;
  }
  if(T >= 229.666 && T < 238.805) { //SKIP
    strokes.add(1);
    lineColor.add(transparent);
    return 238.805;
  }
  if(T >= 226.232 && T < 229.666) { //NOSE
    strokes.add(2);
    lineColor.add(darkskin);
    return T + 0.01;
  }
  if(T >= 216.808 && T < 226.232) { //SKIP
    strokes.add(1);
    lineColor.add(transparent);
    return 226.232;
  }
  if(T >= 213.660 && T < 216.808) { //RIGHT HAND
    strokes.add(2);
    lineColor.add(orange);
    return T;
  }
  if(T >= 204.246 && T < 213.660) { //SKIP
    strokes.add(1);
    lineColor.add(transparent);
    return 213.660;
  }
  if(T >= 201.098 && T < 204.246) { //LEFT HAND
    strokes.add(2);
    lineColor.add(orange);
    return T;
  }
  if(T >= 191.674 && T < 201.098) { //SKIP
    strokes.add(1);
    lineColor.add(transparent);
    return 201.098;
  }
  if(T >= 188.531 && T < 191.674) { //RIGHT EYEBROW
    strokes.add(1);
    lineColor.add(skin);
    return T;
  }
  if(T >= 179.062 && T < 188.531) { //SKIP
    strokes.add(1);
    lineColor.add(transparent);
    return 188.531;
  }
  if(T >= 175.974 && T < 179.062) { //LEFT EYEBROW
    strokes.add(1);
    lineColor.add(skin);
    return T;
  }
  if(T >= 166.518 && T < 175.974) { //SKIP
    strokes.add(1);
    lineColor.add(transparent);
    return 175.974;
  }
  if(T >= 163.405 && T < 166.518) { //CHIN
    strokes.add(2);
    lineColor.add(darkskin);
    return T + 0.01;
  }
  if(T >= 153.931 && T < 163.405) { //SKIP
    strokes.add(1);
    lineColor.add(transparent);
    return 163.405;
  }
  if(T >= 150.818 && T < 153.931) { //NECK
    strokes.add(3);
    if(T < 151.839)
      lineColor.add(skin);
    else
      lineColor.add(orange);
    return T;
  }
  if(T >= 141.384 && T < 150.818) { //SKIP
    strokes.add(1);
    lineColor.add(transparent);
    return 150.818;
  }
  if(T >= 138.256 && T < 141.384) { //LEFT EAR
    strokes.add(2);
    lineColor.add(skin);
    return T;
  }
  if(T >= 128.822 && T < 138.256) { //SKIP
    strokes.add(1);
    lineColor.add(transparent);
    return 138.256;
  }
  if(T >= 125.673 && T < 128.822) { //RIGHT EAR
    strokes.add(2);
    lineColor.add(skin);
    return T;
  }
  if(T >= 116.254 && T < 125.673) { //SKIP
    strokes.add(1);
    lineColor.add(transparent);
    return 125.673;
  }
  if(T >= 113.101 && T < 116.254) { //HAIR
    strokes.add(3);
    lineColor.add(black);
    return T - 0.002;
  }
  if(T >= 106.220 && T < 113.101) { //SKIP
    strokes.add(1);
    lineColor.add(transparent);
    return 113.101;
  }
  if(T >= 100.574 && T < 106.220) { //LEFT EYE
    strokes.add(2);
    lineColor.add(black);
    return T + 0.005;
  }
  if(T >= 91.349 && T < 100.574) { //SKIP
    strokes.add(1);
    lineColor.add(transparent);
    return 100.574;
  }
  if(T >= 88.006 && T < 91.349) { //RIGHT EYE
    strokes.add(2);
    lineColor.add(black);
    return T + 0.005;
  }
  if(T >= 81.724 && T < 88.006) { //SKIP
    strokes.add(1);
    lineColor.add(transparent);
    return 88.006;
  }
  if(T >= 75.413 && T < 81.724) { //BELT
    strokes.add(3);
    lineColor.add(blue);
    return T;
  }
  if(T >= 69.137 && T < 75.413) { //SKIP
    strokes.add(1);
    lineColor.add(transparent);
    return 75.413;
  }
  if(T >= 62.835 && T < 69.137) { //PANTS AND SHOES
    strokes.add(3);
    if(T < 64.256)
      lineColor.add(orange);
    else if(T < 65.831)
      lineColor.add(blue);
    else if(T < 66.526)
      lineColor.add(orange);
    else if(T < 67.253)
      lineColor.add(blue);
    else if(T < 68.503)
      lineColor.add(orange);
    else
      lineColor.add(blue);
    if(T >= 65.831 && T < 65.931)
      T = 65.931;
    return T - 0.002;
  }
  if(T >= 56.539 && T < 62.835) { //SKIP
    strokes.add(1);
    lineColor.add(transparent);
    return 62.835;
  }
  if(T >= 50.273 && T < 56.539) { //RIGHT ARM
    strokes.add(3);
    if(T < 50.608)
      lineColor.add(skin);
    else if(T < 55.954)
      lineColor.add(orange);
    else
      lineColor.add(skin);
    return T;
  }
  if(T >= 43.997 && T < 50.273) { //SKIP
    strokes.add(1);
    lineColor.add(transparent);
    return 50.273;
  }
  if(T >= 37.716 && T < 43.997) { //LEFT ARM
    strokes.add(3);
    if(T < 38.206)
      lineColor.add(skin);
    else if(T < 43.477)
      lineColor.add(orange);
    else
      lineColor.add(skin);
    return T;
  }
  if(T >= 31.374 && T < 37.716) { //SKIP
    strokes.add(1);
    lineColor.add(transparent);
    return 37.716;
  }
  if(T >= 25.171 && T < 31.374) { //LEFT EYE
    strokes.add(2);
    lineColor.add(white);
    return T + 0.005;
  }
  if(T >= 18.857 && T < 25.171) { //SKIP
    strokes.add(1);
    lineColor.add(transparent);
    return 25.171;
  }
  if(T >= 12.603 && T < 18.857) { //RIGHT EYE
    strokes.add(2);
    lineColor.add(white);
    return T + 0.005;
  }
  if(T >= 6.288 && T < 12.603) { //SKIP
    strokes.add(1);
    lineColor.add(transparent);
    return 12.603;
  }
  else { //HEAD
    strokes.add(3);
    if(T < 1.259)
      lineColor.add(black);
    else if (T < 3.450)
      lineColor.add(skin);
    else
      lineColor.add(black);
  }
  
  return T;
}

void draw()
{ 
  //if(frameCount < (FR/2.0)) return;
  if(t <= 84 * PI && running)
  {
    for(int z = 0; z<SampleRate; z++) {
      t = updateT(t);
      points.add(new PVector(x(t), -y(t)));
      if(DEBUGGING)
        print(t + "\n");
    }
  } else {
    if(!DEBUGGING)
      scale += 0.00035;
  }
  
  translate(width/2, height/2 - 50);
  background(0);
  
  beginShape();
  for(int i = 0; i < points.size(); i++)
  {
    if(points.get(i).x == 0 && points.get(i).y == 0) continue;
    strokeWeight(strokes.get(i));
    stroke(lineColor.get(i));
    point(points.get(i).x * scale, points.get(i).y * scale);
  }
  endShape();
}

float sgn(float x)
{
  if(x == 0) return 0;
  else if(x > 0) return 1;
  else return -1;
}

float theta(float x)
{
  if(x == 0) return 0.5;
  else if(x > 0) return 1;
  else return 0;
}

float SIN(float x)
{
  return sin(x);
}

float x(float t)
{
  return ((-75.0/38*sin(26.0/17 - 18*t) - 171.0/20*sin(45.0/29 - 16*t) - 145.0/14*sin(59.0/38 - 14*t) - 47.0/17*sin(39.0/25 - 12*t) - 54.0/5*sin(59.0/38 - 9*t) - 301.0/20*sin(36.0/23 - 6*t) - 221.0/10*sin(36.0/23 - 4*t) - 2590.0/31*sin(36.0/23 - 2*t) - 674.0/11*sin(69.0/44 -t) + 23.0/2*sin(3*t + 41.0/26) + 2000.0/37*sin(5*t + 49.0/31) + 659.0/25*sin(7*t + 46.0/29) + 39.0/31*sin(8*t + 219.0/47) + 247.0/44*sin(10*t + 115.0/72) + 13.0/20*sin(11*t + 179.0/38) + 183.0/32*sin(13*t + 36.0/23) + 387.0/40*sin(15*t + 49.0/31) + 92.0/35*sin(17*t + 41.0/26) + 47.0/43*sin(19*t + 77.0/46) + 1011.0/22)*theta(83*PI -t)*theta(t - 79*PI) + (-3.0/25*sin(64.0/41 - 10*t) - 2.0/23*sin(61.0/39 - 8*t) - 5.0/41*sin(58.0/37 - 6*t) + 1185.0/58*sin(t + 11.0/7) + 17.0/22*sin(2*t + 193.0/41) + 52.0/29*sin(3*t + 113.0/72) + 11.0/29*sin(4*t + 146.0/31) + 33.0/52*sin(5*t + 69.0/44) + 6.0/17*sin(7*t + 41.0/26) + 5.0/32*sin(9*t + 91.0/58) + 2.0/35*sin(11*t + 14.0/9) + 1.0/10*sin(12*t + 193.0/41) + 2269.0/74)*theta(79*PI -t)*theta(t - 75*PI) + (-1.0/65*sin(101.0/67 - 8*t) + 417.0/29*sin(t + 11.0/7) + 58.0/45*sin(2*t + 11.0/7) + 58.0/37*sin(3*t + 11.0/7) + 6.0/37*sin(4*t + 39.0/25) + 11.0/30*sin(5*t + 113.0/72) + 12.0/41*sin(6*t + 11.0/7) + 15.0/61*sin(7*t + 91.0/58) + 3.0/13*sin(9*t + 69.0/44) + 1.0/44*sin(10*t + 41.0/26) + 2.0/23*sin(11*t + 102.0/65) + 1.0/11*sin(12*t + 39.0/25) + 263.0/13)*theta(75*PI -t)*theta(t - 71*PI) + (-429.0/74*sin(58.0/37 - 11*t) - 55.0/19*sin(25.0/16 - 8*t) - 373.0/16*sin(58.0/37 - 6*t) - 232.0/23*sin(58.0/37 -t) + 857.0/18*sin(2*t + 102.0/65) + 772.0/27*sin(3*t + 102.0/65) + 58.0/35*sin(4*t + 49.0/32) + 429.0/29*sin(5*t + 11.0/7) + 56.0/27*sin(7*t + 145.0/31) + 39.0/25*sin(9*t + 187.0/40) + 159.0/26*sin(10*t + 80.0/17) + 17.0/18*sin(12*t + 21.0/13) + 9461.0/24)*theta(71*PI -t)*theta(t - 67*PI) + (-110.0/61*sin(66.0/43 - 12*t) - 155.0/28*sin(23.0/15 - 9*t) - 71.0/26*sin(35.0/23 - 8*t) - 1231.0/41*sin(14.0/9 - 5*t) - 48.0/17*sin(77.0/51 - 4*t) - 513.0/16*sin(39.0/25 - 3*t) - 566.0/15*sin(25.0/16 - 2*t) + 816.0/31*sin(t + 41.0/26) + 1117.0/98*sin(6*t + 27.0/17) + 7.0/37*sin(7*t + 48.0/13) + 31.0/41*sin(10*t + 179.0/38) + 81.0/25*sin(11*t + 34.0/21) - 10963.0/32)*theta(67*PI -t)*theta(t - 63*PI) + (-87.0/25*sin(113.0/72 - 6*t) + 148.0/45*sin(t + 172.0/37) + 173.0/28*sin(2*t + 131.0/28) + 2347.0/44*sin(3*t + 41.0/26) + 67.0/22*sin(4*t + 45.0/28) + 9.0/23*sin(5*t + 132.0/29) - 3440.0/31)*theta(63*PI -t)*theta(t - 59*PI) + (-25.0/13*sin(23.0/15 - 4*t) - 747.0/16*sin(47.0/30 - 3*t) + 8.0/11*sin(t + 62.0/43) + 197.0/27*sin(2*t + 45.0/29) + 36.0/41*sin(5*t + 35.0/22) + 911.0/99*sin(6*t + 30.0/19) + 68.0/41*sin(7*t + 34.0/21) + 3166.0/23)*theta(59*PI -t)*theta(t - 55*PI) + (1559.0/22*sin(t + 11.0/7) + 18.0/13*sin(2*t + 127.0/27) + 445.0/11)*theta(55*PI -t)*theta(t - 51*PI) + (-283.0/22*sin(43.0/28 - 13*t) - 53.0/34*sin(92.0/61 - 10*t) - 39.0/10*sin(68.0/45 - 9*t) - 583.0/46*sin(54.0/35 - 8*t) - 2048.0/17*sin(36.0/23 - 2*t) + 327.0/8*sin(t + 61.0/39) + 643.0/26*sin(3*t + 74.0/47) + 1562.0/35*sin(4*t + 19.0/12) + 1502.0/35*sin(5*t + 8.0/5) + 193.0/5*sin(6*t + 99.0/62) + 745.0/16*sin(7*t + 27.0/17) + 751.0/161*sin(11*t + 50.0/31) + 187.0/29*sin(12*t + 45.0/28) + 119.0/20*sin(14*t + 14.0/9) + 59.0/36*sin(15*t + 77.0/51) + 68.0/19*sin(16*t + 122.0/73) + 82.0/19*sin(17*t + 102.0/61) + 18.0/25*sin(18*t + 66.0/41) + 191.0/4)*theta(51*PI -t)*theta(t - 47*PI) + (-211.0/25*sin(64.0/41 - 9*t) - 365.0/22*sin(102.0/65 - 3*t) + 359.0/34*sin(t + 64.0/41) + 880.0/31*sin(2*t + 245.0/52) + 892.0/35*sin(4*t + 69.0/44) + 71.0/4*sin(5*t + 179.0/38) + 121.0/37*sin(6*t + 25.0/16) + 43.0/26*sin(7*t + 31.0/20) + 39.0/40*sin(8*t + 75.0/47) + 7.0/10*sin(10*t + 170.0/113) + 9.0/20*sin(11*t + 523.0/112) + 4.0/5*sin(12*t + 19.0/12) + 21.0/16*sin(13*t + 30.0/19) + 41.0/33*sin(14*t + 55.0/34) + 27.0/50*sin(15*t + 39.0/25) + 21.0/47*sin(16*t + 61.0/13) + 11.0/20*sin(17*t + 132.0/79) - 19091.0/76)*theta(47*PI -t)*theta(t - 43*PI) + (-20.0/27*sin(48.0/31 - 15*t) - 18.0/31*sin(3.0/2 - 11*t) - 1192.0/29*sin(39.0/25 - 4*t) - 1034.0/107*sin(39.0/25 -t) + 889.0/57*sin(2*t + 68.0/43) + 164.0/21*sin(3*t + 63.0/40) + 261.0/31*sin(5*t + 30.0/19) + 219.0/82*sin(6*t + 61.0/13) + 34.0/23*sin(7*t + 20.0/13) + 1.0/31*sin(8*t + 105.0/32) + 205.0/29*sin(9*t + 51.0/32) + 29.0/12*sin(10*t + 8.0/5) + 33.0/37*sin(12*t + 41.0/26) + 71.0/23*sin(13*t + 50.0/31) + 54.0/17*sin(14*t + 8.0/5) + 81.0/59*sin(16*t + 8.0/5) + 47860.0/159)*theta(43*PI -t)*theta(t - 39*PI) + (-21.0/16*sin(50.0/37 - 57*t) - 18.0/23*sin(43.0/28 - 55*t) - 32.0/37*sin(27.0/19 - 54*t) - 66.0/35*sin(36.0/25 - 52*t) - 21.0/20*sin(19.0/13 - 50*t) - 67.0/28*sin(37.0/24 - 44*t) - 95.0/39*sin(74.0/49 - 43*t) - 167.0/76*sin(64.0/41 - 42*t) - 103.0/29*sin(59.0/38 - 41*t) - 49.0/25*sin(107.0/71 - 37*t) - 1.0/3*sin(302.0/301 - 35*t) - 13.0/36*sin(10.0/11 - 33*t) - 321.0/40*sin(28.0/19 - 22*t) - 225.0/22*sin(17.0/11 - 20*t) - 224.0/27*sin(87.0/56 - 17*t) - 384.0/19*sin(26.0/17 - 15*t) - 765.0/74*sin(43.0/28 - 14*t) - 311.0/9*sin(53.0/34 - 13*t) - 229.0/11*sin(39.0/25 - 7*t) - 5210.0/9*sin(11.0/7 -t) + 41510.0/411*sin(2*t + 11.0/7) + 2509.0/20*sin(3*t + 11.0/7) + 73.0/2*sin(4*t + 113.0/24) + 1818.0/31*sin(5*t + 11.0/7) + 227.0/38*sin(6*t + 16.0/11) + 542.0/39*sin(8*t + 127.0/27) + 821.0/29*sin(9*t + 49.0/31) + 1006.0/23*sin(10*t + 65.0/41) + 297.0/7*sin(11*t + 30.0/19) + 1185.0/38*sin(12*t + 146.0/31) + 40.0/21*sin(16*t + 61.0/39) + 46.0/7*sin(18*t + 91.0/57) + 334.0/9*sin(19*t + 19.0/12) + 575.0/19*sin(21*t + 75.0/47) + 342.0/25*sin(23*t + 47.0/30) + 111.0/20*sin(24*t + 40.0/27) + 261.0/34*sin(25*t + 57.0/37) + 62.0/25*sin(26*t + 17.0/11) + 69.0/13*sin(27*t + 31.0/20) + 32.0/41*sin(28*t + 17.0/13) + 21.0/13*sin(29*t + 101.0/67) + 76.0/23*sin(30*t + 13.0/8) + 222.0/35*sin(31*t + 39.0/25) + 82.0/27*sin(32*t + 61.0/38) + 128.0/69*sin(34*t + 40.0/27) + 139.0/138*sin(36*t + 35.0/22) + 31.0/27*sin(38*t + 37.0/21) + 19.0/21*sin(39*t + 51.0/35) + 44.0/19*sin(40*t + 18.0/11) + 5.0/38*sin(45*t + 31.0/36) + 88.0/89*sin(46*t + 135.0/29) + 36.0/43*sin(47*t + 157.0/98) + 28.0/25*sin(48*t + 50.0/33) + 53.0/33*sin(49*t + 212.0/127) + 191.0/53*sin(51*t + 46.0/29) + 69.0/29*sin(53*t + 61.0/38) + 39.0/32*sin(56*t + 53.0/34) + 1.0/8*sin(58*t + 187.0/59) + 9.0/49*sin(59*t + 46.0/35) + 16.0/21*sin(60*t + 54.0/37) - 4627.0/96)*theta(39*PI -t)*theta(t - 35*PI) + (-17.0/12*sin(5.0/14 - 7*t) - 101.0/40*sin(5.0/4 -t) + 46.0/37*sin(2*t + 38.0/51) + 28.0/9*sin(3*t + 157.0/38) + 1213.0/140*sin(4*t + 233.0/140) + 172.0/35*sin(5*t + 235.0/236) + 69.0/59*sin(6*t + 117.0/31) + 21.0/20*sin(8*t + 28.0/9) + 37.0/30*sin(9*t + 189.0/43) + 7.0/43*sin(10*t + 25.0/24) + 10.0/21*sin(11*t + 101.0/35) + 5.0/9*sin(12*t + 13.0/31) - 325.0/16)*theta(35*PI -t)*theta(t - 31*PI) + (-29.0/31*sin(191.0/192 - 11*t) - 25.0/43*sin(4.0/33 - 9*t) - 69.0/43*sin(15.0/31 - 5*t) - 94.0/73*sin(35.0/58 - 2*t) + 64.0/33*sin(t + 88.0/21) + 141.0/44*sin(3*t + 331.0/72) + 449.0/68*sin(4*t + 84.0/23) + 73.0/53*sin(6*t + 49.0/26) + 40.0/67*sin(7*t + 39.0/35) + 17.0/28*sin(8*t + 233.0/50) + 19.0/37*sin(10*t + 38.0/31) + 3.0/41*sin(12*t + 107.0/24) + 5342.0/61)*theta(31*PI -t)*theta(t - 27*PI) + (-28.0/27*sin(8.0/15 - 10*t) - 113.0/47*sin(13.0/10 - 8*t) - 39.0/4*sin(49.0/55 - 4*t) - 2039.0/28*sin(23.0/31 - 2*t) + 12592.0/69*sin(t + 49.0/43) + 360.0/11*sin(3*t + 8.0/25) + 99.0/10*sin(5*t + 55.0/28) + 531.0/37*sin(6*t + 136.0/39) + 75.0/17*sin(7*t + 110.0/29) + 292.0/65*sin(9*t + 42.0/41) + 79.0/21*sin(11*t + 51.0/77) + 26.0/29*sin(12*t + 111.0/32) + 787.0/19)*theta(27*PI -t)*theta(t - 23*PI) + (-14.0/39*sin(50.0/37 - 60*t) - 123.0/74*sin(26.0/77 - 57*t) - 158.0/85*sin(26.0/37 - 56*t) - 41.0/40*sin(11.0/8 - 55*t) - 11.0/20*sin(53.0/34 - 49*t) - 3.0/8*sin(15.0/13 - 47*t) - 47.0/25*sin(23.0/45 - 40*t) - 131.0/26*sin(5.0/12 - 36*t) - 113.0/42*sin(19.0/24 - 33*t) - 105.0/53*sin(29.0/27 - 28*t) - 284.0/29*sin(37.0/28 - 19*t) - 307.0/26*sin(11.0/20 - 17*t) - 775.0/28*sin(55.0/64 - 16*t) - 297.0/16*sin(40.0/33 - 13*t) - 200.0/11*sin(45.0/29 - 5*t) + 24519.0/53*sin(t + 88.0/87) + 8341.0/83*sin(2*t + 98.0/41) + 388.0/17*sin(3*t + 162.0/35) + 856.0/17*sin(4*t + 94.0/25) + 1657.0/40*sin(6*t + 175.0/68) + 494.0/31*sin(7*t + 73.0/19) + 460.0/21*sin(8*t + 164.0/39) + 393.0/37*sin(9*t + 22.0/7) + 1117.0/49*sin(10*t + 69.0/17) + 602.0/23*sin(11*t + 6.0/53) + 342.0/25*sin(12*t + 191.0/43) + 1462.0/65*sin(14*t + 7.0/23) + 3539.0/354*sin(15*t + 22.0/9) + 172.0/33*sin(18*t + 30.0/61) + 185.0/21*sin(20*t + 195.0/44) + 45.0/14*sin(21*t + 3.0/20) + 64.0/19*sin(22*t + 79.0/27) + 134.0/13*sin(23*t + 55.0/14) + 75.0/26*sin(24*t + 107.0/26) + 56.0/13*sin(25*t + 122.0/29) + 54.0/31*sin(26*t + 115.0/31) + 111.0/38*sin(27*t + 131.0/39) + 55.0/28*sin(29*t + 15.0/26) + 220.0/23*sin(30*t + 184.0/67) + 83.0/37*sin(31*t + 59.0/33) + 243.0/68*sin(32*t + 116.0/25) + 27.0/8*sin(34*t + 107.0/27) + 43.0/34*sin(35*t + 37.0/36) + 16.0/43*sin(37*t + 35.0/26) + 100.0/41*sin(38*t + 101.0/41) + 93.0/65*sin(39*t + 409.0/93) + 55.0/28*sin(41*t + 38.0/13) + 121.0/61*sin(42*t + 245.0/53) + 9.0/17*sin(43*t + 52.0/33) + 19.0/28*sin(44*t + 53.0/22) + 37.0/53*sin(45*t + 71.0/23) + 79.0/46*sin(46*t + 89.0/19) + 2.0/13*sin(48*t + 93.0/29) + 20.0/39*sin(50*t + 31.0/36) + 10.0/11*sin(51*t + 29.0/16) + 23.0/40*sin(52*t + 33.0/25) + 8.0/13*sin(53*t + 27.0/22) + 61.0/31*sin(54*t + 83.0/23) + 20.0/61*sin(58*t + 69.0/31) + 12.0/23*sin(59*t + 19.0/23) + 395.0/16)*theta(23*PI -t)*theta(t - 19*PI) + (-71.0/19*sin(26.0/17 - 14*t) - 47.0/36*sin(17.0/19 - 12*t) - 211.0/53*sin(296.0/295 - 9*t) - 59.0/30*sin(7.0/10 - 8*t) - 511.0/43*sin(13.0/12 - 6*t) - 1529.0/32*sin(109.0/163 - 3*t) - 1985.0/17*sin(25.0/17 - 2*t) + 1518.0/29*sin(t + 65.0/24) + 547.0/14*sin(4*t + 109.0/25) + 1901.0/61*sin(5*t + 83.0/41) + 101.0/23*sin(7*t + 5.0/27) + 319.0/72*sin(10*t + 60.0/17) + 119.0/30*sin(11*t + 88.0/37) + 103.0/31*sin(13*t + 11.0/15) + 23.0/20*sin(15*t + 71.0/25) + 61.0/33*sin(16*t + 329.0/82) + 18.0/25*sin(17*t + 64.0/21) + 31.0/41*sin(18*t + 73.0/41) + 18264.0/47)*theta(19*PI -t)*theta(t - 15*PI) + (-47.0/33*sin(49.0/34 - 17*t) - 45.0/37*sin(57.0/56 - 16*t) - 29.0/17*sin(37.0/32 - 15*t) - 37.0/13*sin(7.0/17 - 12*t) - 129.0/19*sin(59.0/39 - 11*t) - 287.0/9*sin(32.0/23 - 5*t) - 2258.0/31*sin(27.0/31 -t) + 1811.0/14*sin(2*t + 24.0/17) + 773.0/18*sin(3*t + 20.0/9) + 2222.0/45*sin(4*t + 20.0/19) + 197.0/24*sin(6*t + 11.0/8) + 136.0/25*sin(7*t + 83.0/39) + 67.0/17*sin(8*t + 19.0/17) + 82.0/33*sin(9*t + 31.0/29) + 4*sin(10*t + 23.0/45) + 123.0/28*sin(13*t + 82.0/25) + 37.0/10*sin(14*t + 10.0/11) + 17.0/22*sin(18*t + 4.0/43) - 17648.0/53)*theta(15*PI -t)*theta(t - 11*PI) + (-23.0/9*sin(68.0/45 - 4*t) - 259.0/43*sin(36.0/29 - 3*t) - 2733.0/34*sin(24.0/31 -t) + 535.0/72*sin(2*t + 22.0/7) + 97.0/32*sin(5*t + 27.0/32) + 71.0/30*sin(6*t + 104.0/29) - 1999.0/21)*theta(11*PI -t)*theta(t - 7*PI) + (-53.0/31*sin(3.0/7 - 5*t) - 2187.0/32*sin(20.0/27 -t) + 123.0/23*sin(2*t + 51.0/43) + 154.0/27*sin(3*t + 86.0/23) + 29.0/25*sin(4*t + 61.0/25) + 41.0/23*sin(6*t + 40.0/31) + 6810.0/49)*theta(7*PI -t)*theta(t - 3*PI) + (-218.0/27*sin(49.0/34 - 9*t) - 475.0/8*sin(9.0/8 - 2*t) + 3554.0/15*sin(t + 30.0/37) + 396.0/29*sin(3*t + 48.0/23) + 283.0/26*sin(4*t + 41.0/49) + 81.0/28*sin(5*t + 18.0/19) + 971.0/112*sin(6*t + 63.0/38) + 259.0/38*sin(7*t + 38.0/13) + 1373.0/142*sin(8*t + 389.0/97) + 23.0/4*sin(10*t + 70.0/29) + 84.0/25*sin(11*t + 16.0/5) + 305.0/47*sin(12*t + 37.0/27) + 8.0/3*sin(13*t + 59.0/25) + 75.0/23*sin(14*t + 13.0/34) + 107.0/33*sin(15*t + 76.0/23) + 3.0/10*sin(16*t + 115.0/39) + 141.0/22)*theta(3*PI -t)*theta(t +PI))*theta(sqrt(sgn(sin(t/2))));
}

float y(float t)
{
  return ((-199.0/31*sin(65.0/43 - 19*t) - 747.0/49*sin(41.0/27 - 18*t) - 384.0/77*sin(3.0/2 - 17*t) - 148.0/31*sin(31.0/21 - 16*t) - 149.0/23*sin(136.0/91 - 15*t) - 862.0/69*sin(35.0/23 - 14*t) - 135.0/19*sin(38.0/25 - 13*t) - 251.0/47*sin(20.0/13 - 12*t) - 298.0/29*sin(20.0/13 - 11*t) - 488.0/33*sin(48.0/31 - 10*t) - 45.0/34*sin(49.0/33 - 5*t) - 4331.0/39*sin(53.0/34 - 4*t) - 327.0/8*sin(25.0/16 - 3*t) - 1809.0/17*sin(47.0/30 -t) + 2223.0/29*sin(2*t + 41.0/26) + 1136.0/27*sin(6*t + 27.0/17) + 574.0/33*sin(7*t + 27.0/17) + 275.0/18*sin(8*t + 8.0/5) + 61.0/29*sin(9*t + 49.0/29) - 4003.0/8)*theta(83*PI -t)*theta(t - 79*PI) + (64.0/25*sin(t + 11.0/7) + 35.0/17*sin(2*t + 96.0/61) + 80.0/57*sin(3*t + 74.0/47) + 18.0/23*sin(4*t + 74.0/47) + 52.0/155*sin(5*t + 11.0/7) + 2.0/19*sin(6*t + 25.0/16) + 2.0/35*sin(7*t + 31.0/20) + 4.0/39*sin(8*t + 36.0/23) + 4.0/25*sin(9*t + 96.0/61) + 5.0/27*sin(10*t + 41.0/26) + 6.0/35*sin(11*t + 30.0/19) + 5.0/37*sin(12*t + 49.0/31) + 2841.0/16)*theta(79*PI -t)*theta(t - 75*PI) + (-1.0/74*sin(47.0/30 - 11*t) - 5.0/33*sin(11.0/7 - 10*t) - 1.0/81*sin(25.0/16 - 8*t) - 9.0/41*sin(36.0/23 - 4*t) - 74.0/13*sin(11.0/7 - 2*t) + 64.0/17*sin(t + 11.0/7) + 3.0/20*sin(3*t + 30.0/19) + 11.0/23*sin(5*t + 11.0/7) + 12.0/17*sin(6*t + 245.0/52) + 1.0/55*sin(7*t + 179.0/38) + 1.0/11*sin(9*t + 41.0/26) + 4.0/39*sin(12*t + 146.0/31) + 27215.0/112)*theta(75*PI -t)*theta(t - 71*PI) + (-199.0/66*sin(80.0/51 - 12*t) - 178.0/27*sin(39.0/25 - 7*t) - 6205.0/214*sin(11.0/7 - 2*t) - 794.0/23*sin(80.0/51 -t) + 58.0/35*sin(3*t + 26.0/17) + 899.0/26*sin(4*t + 11.0/7) + 25.0/19*sin(5*t + 20.0/13) + 1052.0/33*sin(6*t + 11.0/7) + 59.0/6*sin(8*t + 146.0/31) + 138.0/25*sin(9*t + 96.0/61) + 187.0/23*sin(10*t + 11.0/7) + 173.0/43*sin(11*t + 146.0/31) - 5969.0/15)*theta(71*PI -t)*theta(t - 67*PI) + (-17.0/39*sin(18.0/13 - 12*t) - 69.0/29*sin(86.0/57 - 9*t) - 687.0/125*sin(53.0/35 - 8*t) - 707.0/36*sin(39.0/25 - 3*t) - 227.0/7*sin(39.0/25 - 2*t) - 1157.0/32*sin(47.0/30 -t) + 353.0/20*sin(4*t + 30.0/19) + 238.0/29*sin(5*t + 245.0/52) + 719.0/24*sin(6*t + 43.0/27) + 175.0/16*sin(7*t + 61.0/38) + 426.0/61*sin(10*t + 50.0/31) + 256.0/53*sin(11*t + 70.0/43) - 4329.0/11)*theta(67*PI -t)*theta(t - 63*PI) + (-373.0/31*sin(14.0/9 - 6*t) - 22.0/25*sin(51.0/37 - 4*t) - 701.0/26*sin(61.0/39 - 3*t) - 97.0/37*sin(48.0/31 - 2*t) + 2.0/17*sin(t + 180.0/179) + 35.0/41*sin(5*t + 18.0/13) + 25327.0/54)*theta(63*PI -t)*theta(t - 59*PI) + (-76.0/43*sin(29.0/19 - 7*t) - 811.0/59*sin(53.0/34 - 6*t) - 41.0/33*sin(43.0/29 - 4*t) - 1385.0/41*sin(47.0/30 - 3*t) + 31.0/8*sin(t + 25.0/16) + 145.0/26*sin(2*t + 39.0/25) + 29.0/34*sin(5*t + 49.0/34) + 14723.0/31)*theta(59*PI -t)*theta(t - 55*PI) + (79.0/23*sin(t + 118.0/75) + 199.0/15*sin(2*t + 11.0/7) + 6875.0/32)*theta(55*PI -t)*theta(t - 51*PI) + (-39.0/16*sin(41.0/27 - 18*t) - 211.0/38*sin(68.0/45 - 15*t) - 556.0/35*sin(57.0/37 - 13*t) - 1429.0/51*sin(71.0/46 - 9*t) - 5685.0/203*sin(31.0/20 - 8*t) - 1861.0/27*sin(36.0/23 - 5*t) - 544.0/35*sin(14.0/9 - 3*t) + 2330.0/21*sin(t + 74.0/47) + 291.0/19*sin(2*t + 131.0/82) + 1456.0/27*sin(4*t + 41.0/26) + 511.0/12*sin(6*t + 46.0/29) + 243.0/23*sin(7*t + 11.0/7) + 1639.0/205*sin(10*t + 14.0/9) + 299.0/30*sin(11*t + 29.0/18) + 23.0/54*sin(12*t + 90.0/23) + 171.0/35*sin(14*t + 83.0/55) + 22.0/27*sin(16*t + 39.0/20) + 41.0/16*sin(17*t + 31.0/18) - 128.0/3)*theta(51*PI -t)*theta(t - 47*PI) + (-70.0/29*sin(25.0/16 - 17*t) - 16.0/23*sin(53.0/35 - 16*t) - 867.0/100*sin(48.0/31 - 12*t) - 142.0/11*sin(48.0/31 - 11*t) - 421.0/30*sin(14.0/9 - 10*t) - 57.0/26*sin(47.0/30 - 8*t) + 179.0/19*sin(t + 108.0/23) + 1777.0/35*sin(2*t + 69.0/44) + 2251.0/73*sin(3*t + 146.0/31) + 130.0/33*sin(4*t + 52.0/33) + 472.0/25*sin(5*t + 11.0/7) + 643.0/52*sin(6*t + 113.0/24) + 67.0/24*sin(7*t + 20.0/13) + 125.0/27*sin(9*t + 61.0/39) + 48.0/37*sin(13*t + 25.0/16) + 40.0/21*sin(14*t + 52.0/33) + 37.0/38*sin(15*t + 51.0/32) + 6673.0/23)*theta(47*PI -t)*theta(t - 43*PI) + (-27.0/25*sin(37.0/24 - 16*t) - 563.0/49*sin(82.0/53 - 10*t) - 425.0/59*sin(57.0/37 - 9*t) - 205.0/13*sin(14.0/9 - 8*t) - 57.0/11*sin(43.0/28 - 7*t) - 338.0/49*sin(67.0/43 - 6*t) - 255.0/16*sin(53.0/34 - 4*t) - 1009.0/23*sin(25.0/16 - 3*t) - 25.0/27*sin(80.0/51 -t) + 2323.0/38*sin(2*t + 41.0/26) + 373.0/26*sin(5*t + 27.0/17) + 35.0/24*sin(11*t + 41.0/26) + 15.0/4*sin(12*t + 21.0/13) + 186.0/41*sin(13*t + 61.0/38) + 9.0/25*sin(14*t + 113.0/24) + 22.0/31*sin(15*t + 85.0/54) + 4002.0/13)*theta(43*PI -t)*theta(t - 39*PI) + (-29.0/23*sin(59.0/38 - 60*t) - 13.0/18*sin(107.0/71 - 59*t) - 10.0/29*sin(31.0/24 - 58*t) - 31.0/33*sin(69.0/44 - 52*t) - 323.0/242*sin(58.0/37 - 51*t) - 23.0/24*sin(37.0/26 - 50*t) - 55.0/48*sin(16.0/11 - 49*t) - 7.0/6*sin(71.0/46 - 44*t) - 53.0/36*sin(124.0/83 - 40*t) - 59.0/39*sin(73.0/47 - 35*t) - 5.0/6*sin(35.0/24 - 32*t) - 10.0/7*sin(25.0/17 - 31*t) - 55.0/24*sin(346.0/231 - 30*t) - 122.0/43*sin(47.0/30 - 23*t) - 229.0/29*sin(53.0/34 - 20*t) - 88.0/27*sin(47.0/30 - 3*t) - 10504.0/27*sin(91.0/58 - 2*t) + 991.0/27*sin(t + 11.0/7) + 653.0/17*sin(4*t + 53.0/34) + 237.0/14*sin(5*t + 89.0/19) + 1207.0/19*sin(6*t + 80.0/17) + 344.0/21*sin(7*t + 30.0/19) + 501.0/38*sin(8*t + 39.0/25) + 411.0/19*sin(9*t + 80.0/17) + 706.0/33*sin(10*t + 127.0/27) + 46.0/25*sin(11*t + 41.0/27) + 783.0/77*sin(12*t + 53.0/34) + 211.0/34*sin(13*t + 41.0/26) + 341.0/27*sin(14*t + 113.0/24) + 313.0/32*sin(15*t + 80.0/17) + 95.0/22*sin(16*t + 75.0/47) + 16.0/7*sin(17*t + 23.0/15) + 64.0/11*sin(18*t + 27.0/17) + 9.0/41*sin(19*t + 73.0/27) + 54.0/35*sin(21*t + 34.0/25) + 48.0/23*sin(22*t + 37.0/24) + 205.0/31*sin(24*t + 30.0/19) + 79.0/36*sin(25*t + 11.0/7) + 15.0/17*sin(26*t + 33.0/20) + 30.0/7*sin(27*t + 58.0/37) + 119.0/36*sin(28*t + 35.0/22) + 1.0/23*sin(29*t + 2.0/15) + 635.0/317*sin(33*t + 31.0/19) + 57.0/34*sin(34*t + 45.0/28) + 2.0/9*sin(36*t + 64.0/37) + 24.0/31*sin(37*t + 39.0/25) + 99.0/74*sin(38*t + 61.0/38) + 4.0/19*sin(39*t + 97.0/21) + 5.0/28*sin(41*t + 33.0/29) + 7.0/10*sin(42*t + 11.0/7) + 8.0/25*sin(43*t + 39.0/19) + 2.0/27*sin(45*t + 52.0/33) + 9.0/11*sin(46*t + 33.0/20) + 19.0/35*sin(47*t + 90.0/53) + 27.0/34*sin(48*t + 51.0/29) + 35.0/41*sin(53*t + 69.0/43) + 22.0/29*sin(54*t + 21.0/13) + 23.0/30*sin(55*t + 157.0/34) + 43.0/54*sin(56*t + 143.0/31) + 28.0/85*sin(57*t + 62.0/35) + 34548.0/55)*theta(39*PI -t)*theta(t - 35*PI) + (-230.0/39*sin(9.0/11 - 6*t) - 204.0/25*sin(44.0/31 -t) + 33.0/8*sin(2*t + 1.0/5) + 61.0/36*sin(3*t + 11.0/24) + 473.0/35*sin(4*t + 73.0/20) + 403.0/34*sin(5*t + 53.0/17) + 121.0/43*sin(7*t + 119.0/53) + 27.0/10*sin(8*t + 187.0/40) + 33.0/35*sin(9*t + 56.0/45) + 19.0/22*sin(10*t + 880.0/293) + 46.0/77*sin(11*t + 550.0/127) + 6.0/31*sin(12*t + 130.0/31) + 3347.0/11)*theta(35*PI -t)*theta(t - 31*PI) + (-109.0/82*sin(24.0/29 - 8*t) - 10.0/7*sin(32.0/43 - 6*t) - 455.0/29*sin(36.0/41 - 4*t) - 178.0/27*sin(18.0/29 - 3*t) + 293.0/41*sin(t + 163.0/35) + 4*sin(2*t + 57.0/47) + 135.0/37*sin(5*t + 71.0/39) + 37.0/22*sin(7*t + 69.0/28) + 39.0/77*sin(9*t + 107.0/51) + 9.0/26*sin(10*t + 43.0/31) + 50.0/49*sin(11*t + 28.0/31) + 9.0/20*sin(12*t + 5.0/9) + 9557.0/31)*theta(31*PI -t)*theta(t - 27*PI) + (-87.0/41*sin(91.0/61 - 8*t) - 621.0/41*sin(55.0/41 - 4*t) - 256.0/25*sin(6.0/41 -t) + 197.0/17*sin(2*t + 95.0/42) + 368.0/27*sin(3*t + 29.0/10) + 949.0/79*sin(5*t + 7.0/10) + 181.0/41*sin(6*t + 76.0/31) + 50.0/19*sin(7*t + 58.0/17) + 25.0/58*sin(9*t + 17.0/45) + 9.0/14*sin(10*t + 109.0/30) + 45.0/41*sin(11*t + 53.0/44) + 32.0/65*sin(12*t + 59.0/27) - 12495.0/38)*theta(27*PI -t)*theta(t - 23*PI) + (-15.0/41*sin(49.0/41 - 58*t) - 8.0/9*sin(25.0/39 - 55*t) - 58.0/31*sin(37.0/24 - 49*t) - 31.0/41*sin(34.0/39 - 47*t) - 56.0/45*sin(18.0/31 - 46*t) - 64.0/23*sin(2.0/25 - 44*t) - 62.0/27*sin(23.0/25 - 43*t) - 40.0/27*sin(5.0/26 - 38*t) - 27.0/20*sin(46.0/77 - 37*t) - 155.0/36*sin(53.0/44 - 27*t) - 233.0/36*sin(7.0/37 - 22*t) - 735.0/58*sin(59.0/58 - 16*t) - 173.0/14*sin(11.0/19 - 15*t) - 271.0/15*sin(23.0/31 - 14*t) - 517.0/20*sin(7.0/39 - 5*t) - 5141.0/29*sin(43.0/30 - 3*t) - 12707.0/35*sin(9.0/17 -t) + 537.0/4*sin(2*t + 97.0/26) + 1585.0/27*sin(4*t + 61.0/41) + 2030.0/27*sin(6*t + 45.0/37) + 1243.0/60*sin(7*t + 395.0/93) + 681.0/13*sin(8*t + 107.0/36) + 1595.0/36*sin(9*t + 7.0/15) + 1443.0/44*sin(10*t + 93.0/20) + 983.0/35*sin(11*t + 91.0/36) + 557.0/45*sin(12*t + 142.0/81) + 173.0/34*sin(13*t + 14.0/3) + 145.0/28*sin(17*t + 100.0/23) + 79.0/14*sin(18*t + 171.0/43) + 62.0/13*sin(19*t + 369.0/92) + 13.0/28*sin(20*t + 6.0/23) + 165.0/62*sin(21*t + 86.0/21) + 297.0/46*sin(23*t + 67.0/46) + 181.0/28*sin(24*t + 102.0/65) + 59.0/45*sin(25*t + 97.0/49) + 100.0/13*sin(26*t + 1.0/16) + 245.0/41*sin(28*t + 296.0/91) + 367.0/100*sin(29*t + 23.0/11) + 137.0/18*sin(30*t + 41.0/23) + 60.0/13*sin(31*t + 82.0/39) + 143.0/37*sin(32*t + 24.0/35) + 56.0/25*sin(33*t + 25.0/14) + 86.0/41*sin(34*t + 57.0/20) + 110.0/47*sin(35*t + 125.0/78) + 103.0/39*sin(36*t + 20.0/53) + 97.0/49*sin(39*t + 73.0/23) + 90.0/29*sin(40*t + 21.0/11) + 61.0/22*sin(41*t + 59.0/29) + 39.0/35*sin(42*t + 34.0/19) + 17.0/19*sin(45*t + 132.0/31) + 85.0/57*sin(48*t + 117.0/43) + 46.0/33*sin(50*t + 23.0/26) + 30.0/31*sin(51*t + 68.0/23) + 41.0/40*sin(52*t + 58.0/19) + 47.0/37*sin(53*t + 1.0/6) + 19.0/56*sin(54*t + 19.0/32) + 28.0/23*sin(56*t + 169.0/36) + 53.0/32*sin(57*t + 119.0/36) + 15.0/31*sin(59*t + 137.0/56) + 6.0/13*sin(60*t + 31.0/24) - 28650.0/31)*theta(23*PI -t)*theta(t - 19*PI) + (-9.0/5*sin(49.0/32 - 17*t) - 33.0/20*sin(2.0/5 - 16*t) - 83.0/48*sin(10.0/37 - 11*t) - 49.0/22*sin(3.0/2 - 9*t) - 269.0/27*sin(48.0/55 - 4*t) - 1160.0/33*sin(5.0/16 - 3*t) - 2647.0/11*sin(47.0/33 -t) + 2273.0/34*sin(2*t + 14.0/23) + 92.0/21*sin(5*t + 139.0/53) + 59.0/10*sin(6*t + 36.0/35) + 240.0/29*sin(7*t + 11.0/26) + 115.0/41*sin(8*t + 41.0/29) + 93.0/23*sin(10*t + 69.0/59) + 10.0/23*sin(12*t + 203.0/44) + 68.0/31*sin(13*t + 89.0/28) + 103.0/59*sin(14*t + 315.0/118) + 37.0/28*sin(15*t + 54.0/29) + 27.0/31*sin(18*t + 112.0/31) - 4570.0/21)*theta(19*PI -t)*theta(t - 15*PI) + (-31.0/63*sin(2.0/19 - 16*t) - 27.0/31*sin(19.0/29 - 11*t) - 155.0/18*sin(9.0/62 - 7*t) - 83.0/18*sin(5.0/37 - 6*t) - 1531.0/39*sin(13.0/29 - 3*t) - 9137.0/36*sin(17.0/11 -t) + 7063.0/125*sin(2*t + 11.0/29) + 371.0/24*sin(4*t + 80.0/17) + 74.0/23*sin(5*t + 102.0/49) + 85.0/13*sin(8*t + 9.0/37) + 96.0/29*sin(9*t + 80.0/23) + 973.0/324*sin(10*t + 3.0/22) + 94.0/35*sin(12*t + 159.0/35) + 49.0/45*sin(13*t + 96.0/25) + 25.0/18*sin(14*t + 831.0/416) + 31.0/17*sin(15*t + 33.0/53) + 46.0/39*sin(17*t + 109.0/31) + 19.0/12*sin(18*t + 43.0/24) - 8647.0/43)*theta(15*PI -t)*theta(t - 11*PI) + (-31.0/13*sin(3.0/11 - 5*t) + 730.0/9*sin(t + 35.0/39) + 259.0/23*sin(2*t + 5.0/18) + 107.0/23*sin(3*t + 23.0/12) + 113.0/40*sin(4*t + 105.0/23) + 39.0/20*sin(6*t + 107.0/54) + 7569.0/23)*theta(11*PI -t)*theta(t - 7*PI) + (-229.0/25*sin(11.0/40 - 2*t) + 1735.0/22*sin(t + 20.0/27) + 131.0/39*sin(3*t + 53.0/20) + 53.0/11*sin(4*t + 132.0/29) + 307.0/153*sin(5*t + 23.0/21) + 52.0/69*sin(6*t + 107.0/26) + 5523.0/16)*theta(7*PI -t)*theta(t - 3*PI) + (11599.0/57*sin(t + 108.0/43) + 3650.0/41*sin(2*t + 4.0/37) + 228.0/23*sin(3*t + 411.0/88) + 965.0/38*sin(4*t + 67.0/41) + 342.0/17*sin(5*t + 23.0/36) + 513.0/16*sin(6*t + 29.0/22) + 355.0/16*sin(7*t + 64.0/19) + 732.0/35*sin(8*t + 87.0/19) + 97.0/16*sin(9*t + 85.0/22) + 264.0/43*sin(10*t + 71.0/25) + 290.0/33*sin(11*t + 49.0/20) + 58.0/25*sin(12*t + 95.0/33) + 419.0/70*sin(13*t + 81.0/80) + 77.0/18*sin(14*t + 322.0/99) + 130.0/93*sin(15*t + 57.0/23) + 132.0/29*sin(16*t + 95.0/41) + 8585.0/21)*theta(3*PI -t)*theta(t +PI))*theta(sqrt(sgn(sin(t/2))));
}
